"""
M√©todos Num√©ricos - Lista 1 Geral
Vers√£o de Demonstra√ß√£o (Execu√ß√£o Autom√°tica)

Prof. Jo√£o B. Oliveira

Este script executa automaticamente todos os exerc√≠cios da Lista 1 de M√©todos Num√©ricos
sem intera√ß√£o do usu√°rio, ideal para demonstra√ß√µes e testes.
"""

import sys
import os

# Adicionar os diret√≥rios dos m√≥dulos ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'Sistemas_Ponto_Flutuante'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Resolucao_Equacoes'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Sistemas_Lineares'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Cadeias_Markov'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Interpolacao'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Diferenciacao_Automatica'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'Sistemas_Dinamicos'))

def executar_sistemas_ponto_flutuante():
    """
    Executa os exerc√≠cios de Sistemas de Ponto Flutuante
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 1: SISTEMAS DE PONTO FLUTUANTE")
    print("="*80)
    
    try:
        from sistemas_ponto_flutuante import main as main_spf
        main_spf()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Sistemas de Ponto Flutuante: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_resolucao_equacoes():
    """
    Executa os exerc√≠cios de Resolu√ß√£o de Equa√ß√µes
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 2: RESOLU√á√ÉO DE EQUA√á√ïES")
    print("="*80)
    
    try:
        from resolucao_equacoes import main as main_re
        main_re()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Resolu√ß√£o de Equa√ß√µes: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_sistemas_lineares():
    """
    Executa os exerc√≠cios de Sistemas Lineares
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 3: SISTEMAS LINEARES")
    print("="*80)
    
    try:
        from sistemas_lineares import main as main_sl
        main_sl()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Sistemas Lineares: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_cadeias_markov():
    """
    Executa os exerc√≠cios de Cadeias de Markov
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 4: CADEIAS DE MARKOV")
    print("="*80)
    
    try:
        from cadeias_markov import main as main_cm
        main_cm()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Cadeias de Markov: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_interpolacao():
    """
    Executa os exerc√≠cios de Interpola√ß√£o
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 5: INTERPOLA√á√ÉO")
    print("="*80)
    
    try:
        from interpolacao import main as main_int
        main_int()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Interpola√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_diferenciacao_automatica():
    """
    Executa os exerc√≠cios de Diferencia√ß√£o Autom√°tica
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 6: DIFERENCIA√á√ÉO AUTOM√ÅTICA")
    print("="*80)
    
    try:
        from diferenciacao_automatica import main as main_da
        main_da()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Diferencia√ß√£o Autom√°tica: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def executar_sistemas_dinamicos():
    """
    Executa os exerc√≠cios de Sistemas Din√¢micos
    """
    print("\n" + "="*80)
    print("SE√á√ÉO 7: SISTEMAS DIN√ÇMICOS")
    print("="*80)
    
    try:
        from sistemas_dinamicos import main as main_sd
        main_sd()
        return True
    except ImportError as e:
        print(f"Erro: N√£o foi poss√≠vel importar o m√≥dulo de Sistemas Din√¢micos: {e}")
        return False
    except Exception as e:
        print(f"Erro durante execu√ß√£o: {e}")
        return False

def main():
    """
    Fun√ß√£o principal que executa todos os exerc√≠cios automaticamente
    """
    print("M√âTODOS NUM√âRICOS - LISTA 1 GERAL")
    print("Prof. Jo√£o B. Oliveira")
    print("VERS√ÉO DE DEMONSTRA√á√ÉO - EXECU√á√ÉO AUTOM√ÅTICA")
    print("="*80)
    
    # Lista de fun√ß√µes para executar
    funcoes = [
        ("Sistemas de Ponto Flutuante", executar_sistemas_ponto_flutuante),
        ("Resolu√ß√£o de Equa√ß√µes", executar_resolucao_equacoes),
        ("Sistemas Lineares", executar_sistemas_lineares),
        ("Cadeias de Markov", executar_cadeias_markov),
        ("Interpola√ß√£o", executar_interpolacao),
        ("Diferencia√ß√£o Autom√°tica", executar_diferenciacao_automatica),
        ("Sistemas Din√¢micos", executar_sistemas_dinamicos)
    ]
    
    # Contadores para estat√≠sticas
    sucessos = 0
    falhas = 0
    
    print("\nIniciando execu√ß√£o autom√°tica de todos os exerc√≠cios...")
    print("="*80)
    
    # Executar cada se√ß√£o
    for nome, funcao in funcoes:
        print(f"\nExecutando: {nome}")
        print("-" * 50)
        
        try:
            resultado = funcao()
            if resultado:
                sucessos += 1
                print(f"‚úì {nome} executado com sucesso")
            else:
                falhas += 1
                print(f"‚úó {nome} falhou na execu√ß√£o")
        except Exception as e:
            falhas += 1
            print(f"‚úó {nome} falhou com erro: {e}")
    
    # Resumo final
    print("\n" + "="*80)
    print("RESUMO DA EXECU√á√ÉO")
    print("="*80)
    print(f"Se√ß√µes executadas com sucesso: {sucessos}")
    print(f"Se√ß√µes com falhas: {falhas}")
    print(f"Total de se√ß√µes: {len(funcoes)}")
    
    if falhas == 0:
        print("\nüéâ TODOS OS EXERC√çCIOS FORAM EXECUTADOS COM SUCESSO!")
    else:
        print(f"\n‚ö†Ô∏è  {falhas} se√ß√£o(√µes) falharam na execu√ß√£o.")
        print("Verifique os arquivos dos m√≥dulos correspondentes.")
    
    print("\n" + "="*80)
    print("EXECU√á√ÉO CONCLU√çDA!")
    print("="*80)

if __name__ == "__main__":
    main()
